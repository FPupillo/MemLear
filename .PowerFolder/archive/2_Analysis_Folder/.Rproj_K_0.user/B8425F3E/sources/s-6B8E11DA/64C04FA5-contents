---
title: "02.analysis_day2-contingencies.R"
author: "Francesco Pupillo"
date: "4/14/2021"
output:
   html_document:
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r message=FALSE, warning=FALSE, include=T}
# set current directory to the parent folder
setwd(dirname(getwd()))

rm(list=ls())
library(dplyr)# select comes from this
library(ggplot2)
library(lme4)
library(lmerTest)
source("helper_functions/selPart.R")
source("helper_functions/getCat.R")
source("helper_functions/cumAcc.R")
source("helper_functions/cumAccbyChar.R")
source("helper_functions/indCP.R")
source("helper_functions/R_rainclouds.R")
source("helper_functions/getcorrCat.R")

```

```{r message=FALSE, warning=FALSE, include=T}
# set current directory to the parent folder
setwd(dirname(getwd()))

# sel files
cd<-getwd()
setwd("data_files_clean")
files<-selPart(2)
setwd(cd)

# delete the double files (3)
numb3<-files[substr(files, 1,2)=="01"][1:2]

files<-files[!files %in% numb3]


```

```{r include=F}
# set current directory to the parent fol der
setwd(dirname(getwd()))
# 2. calculate cumulative accuracy per participant and reaction times
AccDay2<-data.frame(SubNum=vector(), character=character(), response = vector(), respCat = character(), accuracy=vector(), cumAcc=vector(), corrCat = vector(),
                    cumAccBlock = vector(), cumAccbyChar = vector(), RT=vector(), trialNum<-vector(), trialNbychar=vector(),
                    listN=vector(), tfromchange=vector() , befAft<-vector(),  iCP<-vector(),
                    trialCond=vector(), image=character())

for (j in 1 : (length(files))){
  
  tryCatch({
    
  # load the files  
  day2<-read.csv(paste("data_files/", files[j], sep=""))
  
  #convert all the category columns to character
  for (c in 21:24){
    day2[[c]]<-as.character(day2[[c]])
  }
  
  # assign the right list and the number of trials since the last change
  switchN<-c(1, 2, 3,4,5)
  
  cleanList<-vector()
  for (s in 1 : length(switchN)){
  
    currlist<-day2[day2$switch_cond==switchN[s],]
    # delete NAs
    currlist<-currlist[!is.na(currlist$switch_cond),]
    
    # we need to create an exception for list 1, that has 23 trials
    if (s ==1){ # so first take the congruent only, and divide by two
       # tak only the congruent trials
    currlist<-currlist[currlist$trial_cond==1,]
     currlist$befAft<-rep(c(0,1), each=nrow(currlist)/2)
         currlist$tfromchange<-seq(1:nrow(currlist))

    } else { # for the rest of the lists, divide them first to allocate
      # them either to before or after
      currlist$befAft<-rep(c(0,1), each=nrow(currlist)/2)
      # t from change before selecting only congruent
      currlist$tfromchange<-seq(1:nrow(currlist))

      # then delete the incongruent
    currlist<-currlist[currlist$trial_cond==1,]

    }

   # currlist<-currlist[currlist$trial_cond==1,]
    # currlist$befAft<-rep(c(0,1), each=nrow(currlist)/2)
     #      currlist$tfromchange<-seq(1:nrow(currlist))
    #currlist$befAft2<-rep(c(0, 1, 2), each = nrow(currlist)/3)
    
    if (s==1){
      currlist$listN<-0
      # report the character
      currlist$character<-NA
      # report the category selected
      currlist$respCat<-NA
      for (t in 1: nrow(currlist)){
        currlist$character[t]<-substr(currlist$cuedCharacter[t], 9,    (nchar(as.character(currlist$cuedCharacter[t]))-4))
        # get the selected category
        if (!is.na(currlist$warmup_resp.keys[t])){
        selCat<-getCat(currlist$warmup_resp.keys[t])
        currlist$respCat[t]<-substr(currlist[t,selCat], 9, nchar(as.character(currlist[t,selCat]))-4)
        } else { currlist$respCat[t]<-NA}
      }
      
      # response for the warmup
      currlist$response<-currlist$warmup_resp.keys
      
      # calculate accuracy
      currlist$accuracy<-currlist$warmup_resp.corr
      
      # reaction time
      currlist$RT<-currlist$warmup_resp.rt
      
      # calculate cumulative accuracy by block
      currlist$cumAccBlock<-cumAcc(currlist$accuracy)
      
      # calculate cumulative accuracy by block per character
      currlist<-cumAccbyChar(currlist)
      
      # calculate individual change point
      currlist<-indCP(currlist)
      
      cleanList<-rbind(cleanList, currlist)
    } else {
      currlist$listN<-s
      # report the character
      currlist$character<-NA
      # report the flower selected
      currlist$respCat<-NA
      for (t in 1: nrow(currlist)){
        currlist$character[t]<-substr(currlist$cuedCharacter[t], 9, (nchar(as.character(currlist$cuedCharacter[t]))-4))
        # get the selected flower
        # only if it is not null
        if (!is.na(currlist$task_resp.keys[t])){
          selCat<-getCat(currlist$task_resp.keys[t])
          currlist$respCat[t]<-substr(currlist[t,selCat], 9, nchar(as.character(currlist[t,selCat]))-4)
        } else {currlist$respCat[t]<-NA}
      }
      currlist$response<-currlist$task_resp.keys
      
      currlist$accuracy<-currlist$task_resp.corr
      currlist$RT<-currlist$task_resp.rt
      
      # calculate cumulative accuracy by block
      currlist$cumAccBlock<-cumAcc(currlist$accuracy)
      
      # calculate cumulative accuracy by block per character
      currlist<-cumAccbyChar(currlist)
      
      # calculate individual change point
      currlist<-indCP(currlist)
      
      cleanList<-rbind(cleanList, currlist)
   
    }
  }
  SubNum<-rep(as.numeric(substr(files[j], 1,2)), times=nrow(cleanList))
  
  #task1$myownaccuracy<-as.numeric(as.character(task1$myownaccuracy))
  cleanList$cumAcc<-c(cumAcc(cleanList$warmup_resp.corr[cleanList$switch_cond==1]), 
                                      cumAcc(cleanList$task_resp.corr[!is.na(cleanList$task_resp.corr)]))
  cleanList$trialNum<-seq(1:nrow(cleanList))
  objfile<-substr(cleanList$image, 17, (length(cleanList$image)-4))
  
    # get the correct category
  cleanList<-getcorrCat(cleanList)
  
  partData<-data.frame(cbind(SubNum,cleanList$character,cleanList$response, cleanList$respCat,cleanList$corr_category, cleanList$accuracy, cleanList$cumAcc,
                             cleanList$cumAccBlock, cleanList$cumAccbyChar, cleanList$RT, 
                             cleanList$trialNum, cleanList$trialNbychar, cleanList$listN, cleanList$tfromchange,
                             cleanList$befAft , cleanList$iCP,  cleanList$trial_cond, objfile))
  
  names(partData)<-c("SubNum", "character","response", "respCat" ,"corrCat",  "accuracy",  "cumAcc", 
                                                            "cumAccBlock","cumAccbyChar", "RT","trialNum","trialNbychar", "listN",
                                       "NfromChange", "befAft", "iCP", "trialCond", "image")
  AccDay2<-rbind(AccDay2, partData)

  },error=function(e){cat("ERROR :",conditionMessage(e), "\n", j)}) 
}

count<-AccDay2 %>% group_by(trialNum)%>%
  tally()

# print the file
write.csv(AccDay2, "output_files/day2_accuracy.csv", row.names = F)
```

### check that we have all the right number of trials before and after
``` {r checks}
AccDay2 %>%
  group_by(befAft, listN) %>%
  tally()
```

``` {r plots}
setwd(dirname(getwd()))
# plot cumACC
# by participant and list N
# first convert factor as numeric
for (c in 5:10){
  AccDay2[[c]]<-as.numeric(as.character(AccDay2[[c]]))
}

# convert listN as factor
AccDay2$listN<-as.factor(AccDay2$listN)

# plot it
ggplot(AccDay2, aes(x=trialNum, y = cumAcc, color=listN))+ geom_line()+
  geom_vline(xintercept = c(18, 54,90, 126))+
  facet_wrap(.~SubNum)

# convert trialNbyChar change to numeric. It is the trial N referred to each character
class(AccDay2$trialNbychar)
# this is the cumulative accuracy by trial number
class(AccDay2$cumAccbyChar)
AccDay2$trialNbychar<-as.numeric(as.character(AccDay2$trialNbychar))
AccDay2$cumAccbyChar<-as.numeric(as.character(AccDay2$cumAccbyChar))
AccDay2$NfromChange<-as.numeric(as.character(AccDay2$NfromChange))


#by list and participant- individual change point
ggplot(AccDay2[AccDay2$listN!=0,], aes(x=NfromChange, y = cumAccBlock, color=iCP))+ geom_line()+
  facet_grid(listN~SubNum)

# by list, character, and participants
ggplot(AccDay2[AccDay2$listN!=0,], aes(x=trialNbychar, y = cumAccbyChar, color=character))+ geom_line()+ 
  ggtitle("Day2:cumulative accuracy by participant, character, and list")+
  #geom_vline(xintercept = c(18, 54,90, 126))+
  facet_grid(listN~SubNum)

# first exclude the list 0
datacomp<-AccDay2[AccDay2$listN!=0,]
# rename the levels
levels(datacomp$befAft)<-c("afterCP", "beforeCP")

# change reference level
datacomp$befAft<-relevel(datacomp$befAft, ref="afterCP")
# change reference level
#datacomp$befAft2<-relevel(datacomp$befAft2, ref="afterCP")
str(datacomp)

# group by ID
groupData<-datacomp %>%
             group_by(SubNum, befAft, listN) %>%
  summarise (accuracy = mean(accuracy), 
             RT=mean(RT))
# ggplot
ggplot(datacomp, aes(befAft, accuracy))+
  geom_bar(aes(befAft, accuracy, fill = befAft),
                                                    position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  
  theme_bw()+
   geom_line(data = groupData, aes(befAft, accuracy,group = SubNum), size=1, alpha=0.2, stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Accuracy")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
                                     theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")
  #facet_wrap(.~SubNum)

# ggplot withotu individual lines
ggplot(datacomp, aes(befAft, accuracy))+
  geom_bar(aes(befAft, accuracy, fill = befAft),
                                                    position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  
  theme_bw()+
   #geom_line(data = groupData, aes(befAft, accuracy,group = SubNum), size=1, alpha=0.4, stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Accuracy")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
                                     theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# by subject
# ggplot
ggplot(datacomp, aes(befAft, accuracy))+
  geom_bar(aes(befAft, accuracy, fill = befAft),
                                                    position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
   #geom_line(data = groupData, aes(befAft, accuracy,group = SubNum), size=1, alpha=0.4, stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Accuracy")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
                                     theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")+
  facet_wrap(.~SubNum)

# individual change point
# group by ID
groupDataiCP<-datacomp %>%
             group_by(SubNum, iCP, listN) %>%
  summarise (accuracy = mean(accuracy), 
             RT=mean(RT))



# group by part
ggplot(datacomp, aes(iCP, accuracy))+
  geom_bar(aes(iCP, accuracy, fill = iCP),
                                                    position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
   geom_line(data = groupDataiCP, aes(iCP, accuracy,group = SubNum), size=1, alpha=0.4, stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Accuracy")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
                                     theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# now reaction times
ggplot(datacomp, aes(befAft, RT))+ geom_bar(aes(befAft, RT, fill = befAft),
                                                  position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  geom_line(data = groupData, aes(befAft, RT,group = SubNum), size=1, alpha=0.2,stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Reaction Time")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# reaction time for iCP
# now reaction times
ggplot(datacomp, aes(iCP, RT))+ geom_bar(aes(iCP, RT, fill = iCP),
                                                  position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  geom_line(data = groupDataiCP, aes(iCP, RT,group = SubNum), size=1, alpha=0.4,stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Reaction Time")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# try the raincloudsplots
ggplot(datacomp, aes(y=RT, x=listN, fill=befAft, colour=befAft ))+
  geom_flat_violin(position = position_nudge(x = .25, y = 0), adjust = 2, trim = FALSE, alpha = .5, colour = NA)
  #geom_boxplot(aes(x=as.numeric(as.character(listN))+0.25, y=RT), outlier.shape = NA,alpha=0.3, width=0.1, colour = "BLACK")

# do it by block
# Accuracy
  ggplot(datacomp, aes(befAft, accuracy))+ geom_bar(aes(befAft, accuracy, fill = befAft),
                                                    position="dodge",stat="summary", fun.y="mean", SE=T)+
    stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
    #geom_jitter( size=1,width=0.1)+
    theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
    theme(axis.ticks.x = element_blank())+
    theme_bw()+
    geom_line(data = groupData, aes(befAft, accuracy,group = SubNum), size=1, alpha=0.2)+
    facet_grid(.~listN)+
    theme(strip.text.x = element_text(size = 13))+ 
    ylab("Accuracy")+
    scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
    theme(axis.text.x = element_text( size = 20, angle =30))+
    theme(axis.title=element_text(size=14,face="bold"))+
    theme(legend.position = "none")

# RT
ggplot(datacomp, aes(befAft, RT))+ geom_bar(aes(befAft, RT, fill = befAft),
                                                  position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  geom_line(data = groupData, aes(befAft, RT,group = SubNum), size=1, alpha=0.2)+
  facet_grid(.~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("RT")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle =30))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")


```
```{r}
# check the switch back
datacomp$switch_back<-NA
for (n in 1:nrow(datacomp)){
  if (datacomp$listN[n]==4 & datacomp$character[n]=="m5"){
    datacomp$switch_back[n]<-1
  } else if (datacomp$listN[n]==5 & datacomp$character[n]=="m2"){
    datacomp$switch_back[n]<-1
  } else{
    datacomp$switch_back[n]<-0
  }
}

# select only no switch back
ggplot(datacomp[datacomp$listN==4 | datacomp$listN==5 ,], aes(befAft, accuracy))+ 
  geom_bar(aes(befAft, accuracy, fill = befAft),
           position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  facet_grid(listN~switch_back)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % correct")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")
```